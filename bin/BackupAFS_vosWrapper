#!/usr/bin/perl
#============================================================= -*-perl-*-
#
# BackupAFS_vosWrapper
#
# DESCRIPTION
#   Takes BackupAFS arguments and actually runs the "vos dump" and
#   "vos restore" commands necessary to backup and restore volumes
#   from AFS <http://www.openafs.org>
#
#   There are currently lots of places that the code could be cleaned up.
#   This should be considered a proof of concept.
#
#   NOTE: This script assumes that it can use "-localauth", that is that
#   the cell's keyfile is available and readable by the user running this
#   script (normally backup or backupafs). This is a security concern!
#   You should take pains to ensure that normal users, even those
#   authenticated via the CGI, cannot read the keyfile. In all locations.
#   Including any backups of this server.
#
#   An alternative is ensure that the user running this script has tokens
#   capable of performing vos dumps. In this case, "-localauth"
#   may be removed. If you choose to do this, you're on your own.
#
# AUTHOR
#   Stephen Joyce  <stephen@physics.unc.edu>
#
# COPYRIGHT
#   Copyright (C) 2006,2010 Stephen Joyce
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; version 3 ONLY.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Version 1.0.0, released 22 Nov 2010.
#
use lib "__INSTALLDIR__/lib";
use BackupAFS::Lib;
use File::Basename;
use File::Path qw(mkpath);
use Getopt::Long;

sub getSize
{
    my ($file) = @_;
    my $stat = "/usr/bin/stat";
    my $ssize=0;
    #print "DEBUG: getting size of $file\n";
    return 0 if ( ! -e $file );
    open STAT,"$stat $file|";
    my $line="";
    while (<STAT>) {
      chomp;
      $line=$_;
      #print "DEBUG: $line\n";
      if ( $line=~/Size:/ ){
        $line=~s/^.*Size:\s*//;
        $line=~s/\s*Blocks.*$//;
        $ssize = $line;
      }
    }
    #print "DEBUG: size of $file is $ssize\n";
    return $ssize if ($ssize =~/\d+/ );
    return 0;
}

sub getMangle {
	# Given a backup number, parse the backups file to determine
	# whether that backup's filenames are mangled.
	my ($dump) = @_;
	print "Checking to see if dump $dump is mangled in backups file.. ";
	my $mangle= 0;
	my $backupsfile = "$clientDir/backups";
	open BF,"<$backupsfile" or die "Couldn't open backups file for reading";
	while (<BF>) {
		my $line=$_;
		next if ( !($line=~/^$dump\t/));
		# got our dump. Whew!
		$level = (split /\t/,$line)[19];
		last;
	}
	close (BF);
	# BackupPC4AFS didn't properly record the mangle flag, so if mangle is false,
	# we need to do another check for the existence of the mangled directory.
	if ( $mangle == 0 ) {
		$mangle = 1 if ( -d "$clientDir/$dump/f%2f/" );
		# any other directory means not mangled.
	}
	print "$mangle\n";
	return $mangle;
}

sub getLevel {
	# Given a backup number, parse the BPC backups file to determine
	# that backup's level.
	my ($dump) = @_;
	my $level = 99999;
	my $backupsfile = "$clientDir/backups";
	open BF,"<$backupsfile" or die "Couldn't open backups file for reading";
	while (<BF>) {
		my $line=$_;
		next if ( !($line=~/^$dump\t/));
		# got our dump. Whew!
		$level = (split /\t/,$line)[21];
		last;
	}
	close (BF);
	return $level;
}

sub restoreaFile {
	# Given the path to a .vdmp file (created by vos dump), perform
	# a vos restore, using the args provided by the admin

	my ($path) = @_;
	my $vosrestoreargs;
	print " - Restoring $path\n";
	my @path = split/\//,$path;
        my ($filename,$dirname,$suffix) = fileparse ($path,"");
	my $tmpdir="$Conf{TopDir}/tmp";
	my $tmpfile="$tmpdir/tmpfile.$$";;
	my $file_is_compressed=0;

	# Yank the volumename out of the filename and unmangle it
	my $volume = $filename;
	$volume=~s/-\d\d\d\d_\d\d_\d\d_\d\d_\d\d_\d\d-L\d\.vdmp//g;
	$volume=~s/^f//g;

	# vos restore doesn't understand "-extension" unlike afs' backup
	# program. So we emulate it here since the admin probably doesn't
	# often want to overwrite the original when restoring a volume.
	# Simply append the value to $volume.
	for my $arg ( split /-+/,$restoreargs) {
		next if (!$arg);
		if ($arg=~/extension/) {
			my ($keyword,$value) = split /\s+/,$arg;
			$volume=$volume . "$value";
		} else {
			$vosrestoreargs = $vosrestoreargs . "-$arg";
		}
	}

	if (($filename=~/-L0.vdmp/ ) || ($filename=~/-L0.vdmp.gz/ )) {
		# it's a full (Level 0) dump file
		$vosrestoreargs = $vosrestoreargs . " -overwrite full -verbose";
	} elsif (($filename=~/L\d.vdmp$/) || ($filename=~/L\d.vdmp.gz/)) {
		$vosrestoreargs = $vosrestoreargs . " -overwrite incremental -verbose";
	} else {
		# should never be reached
		$vosrestoreargs = $vosrestoreargs . " -overwrite abort -verbose";
	}
        chdir "$dirname" or die "Couldn't change to dir $dir: $!\n";

	# Check to see if the filename is compressed. If so, uncompress
	# to a temporary name.
        if ($filename=~/.gz$/) {
		$file_is_compressed=1;

		if ( ! -d $tmpdir ) {
			mkdir("$tmpdir",0770) or die "Couldn't create $tmpdir: $!\n";
		}
		#my $gzip = "/bin/gzip";
		my $gzip = "/usr//bin/pigz";
		print " - Expanding $filename -> $tmpfile ... ";
		open GUNZIP, "$gzip -d -c $filename > $tmpfile |";
		while (<GUNZIP>) {
			chomp;
			print "$_\n";
		}
		if ($?) {
			print "Failed!\n Error during gzip expansion.\n";
			close (GUNZIP);
			return 1;
		}
		print "Done!\n";
		close (GUNZIP);
	}
	my $cmd = "";
	if ($file_is_compressed) {
		$volume=~s/\.gz//g;
		$cmd = "$VOS restore -file $tmpfile -name $volume $vosrestoreargs -localauth";
	} else {
		$cmd = "$VOS restore -file $filename -name $volume $vosrestoreargs -localauth";
	}
	my $localerror=1;
	# Check length of $volume. AFS limits volume names of RW volumes to 22 characters
	if (length($volume) > 22 ) {
		print "Length of proposed volume name \"$volume\" is ".length($volume). "characters.\nAFS limits the length of RW volume names to 22 characters.\n";
	} else {
		print "Restoring with: $cmd\n";
		open (VRES, "$cmd 2>&1 |") or warn "Couldn't restore $volume from $path\n";
		while (<VRES>) {
			chomp;
			my $line=$_;
			print "$VOS restore : \"$line\"\n";
			$localerror=0 if ($line=~/^Restored volume/);
		}
		close (VRES);
		print "Error with vos restore\n" if ($localerror);

	}
	if (($file_is_compressed) && ( -e $tmpfile )) {
		$byteCnt+=getSize("$tmpfile") if ( ! $localerror);
		print " - Removing temporary file $tmpfile ... ";
		unlink("$tmpfile");
		print "Done!\n";
	} else {
		$byteCnt+=getSize("$filename") if ( ! $localerror);
	}
	$fileCnt+=1 if ( ! $localerror);
        return $localerror;
}


sub restoreaDir {
	# Technically we can only restore files, so perhaps this
	# should be parseaDir. Regardless, traverse the tree looking
	# for files to restore.
	my ($dir) = @_;
	opendir(DIR, $dir) or warn "couldn't read $dir for restoration\n";
	my @names = readdir(DIR);
        my $localerror=0;
	for my $name (@names) {
		next if (($name eq ".") || ($name eq ".."));
		if (-d "$dir/$name") {
			$localerror = 1 if (restoreaDir ("$dir/$name"));
                }
		if (-f "$dir/$name") {
			$localerror = 1 if (restoreaFile ("$dir/$name"));
                }
	}
	close (DIR);
        #print "\nrestoreaDir exiting with $localerror\n";
        return $localerror
}

sub IncrIsNecessary {
	my ($volume)=@_;
	my $update, $volsetdumpdate = undef;
		$volsetdumpdate = $incrDate;
		my ($date,$time)=split /\s+/,$volsetdumpdate;
		my ($year,$monthnum,$dom)=split /-/,$date;
		my ($hour,$min,$sec)=split /:/,$time;
		$volsetdumpdate = $year . $monthnum . $dom . $hour . $min . $sec;
		print "Looking for changes made to $volume since $volsetdumpdate\n";
	open (VEX, "$VOS examine $volume -localauth|") or warn "couldn't examine $volume\n";
	while (<VEX>) {
		chomp;
		my $line=$_;
		#print "DEBUG: \"$line\"\n";
		if ($line=~/Last Update/) {
			$update=$line;
			$update=~s/^\s+Last Update\s+//g;
	
			# sometimes a volume is "Never" modified. ?!?
			$update = "Thu Aug 24 21:36:00 1972" if ($update=~/ever/);
	
			my ($dow,$month,$dom,$time,$year)=split /\s+/,$update;
			my ($hour,$min,$sec)=split /:/,$time;
			$dom = "0$dom" unless ($dom=~/\d\d/);
			%map = (
				Jan => "01",
				Feb => "02",
				Mar => "03",
				Apr => "04",
				May => "05",
				Jun => "06",
				Jul => "07",
				Aug => "08",
				Sep => "09",
				Oct => "10",
				Nov => "11",
				Dec => "12",
			);
			my $monthnum = $map{$month};
			$update = $year . $monthnum . $dom . $hour . $min . $sec;
	
			print " $volume last updated $update\n";
		}
		# update
		if ($line=~/Creation/) {
			$creation=$line;
			$creation=~s/^\s+Creation\s+//g;
			$creation= "Thu Aug 24 21:36:00 1972" if ($creation=~/ever/);
			my ($dow,$month,$dom,$time,$year)=split /\s+/,$creation;
			my ($hour,$min,$sec)=split /:/,$time;
			$dom = "0$dom" unless ($dom=~/\d\d/);
			%map = (
				Jan => "01",
				Feb => "02",
				Mar => "03",
				Apr => "04",
				May => "05",
				Jun => "06",
				Jul => "07",
				Aug => "08",
				Sep => "09",
				Oct => "10",
				Nov => "11",
				Dec => "12",
			);
			my $monthnum = $map{$month};
			$creation= $year . $monthnum . $dom . $hour . $min . $sec;
	
			print " $volume created $creation\n";
		} # creation
	}
	close (VEX);
	if ($volsetdumpdate < $update ) {
		# This volume has been updated since the parent dump was taken
		# IncrIsNecessary is true
		return 1;
	} 
	if ( $volsetdumpdate < $creation) {
		print " *** $volume created $creation, which is more recent than parent dump (dated $volsetdumpdate)\n";
		print " *** $volume was apparently created after last parent dump, yet not updated.\n";
		print "     (possibly as the result of a volume restoration?) It must\n";
		print "     be dumped. Even though this is an incremental dump\n";
		print "     of this volumeset, it is a level 0 (full) dump of $volume.\n";
		# This volume has been created since the parent dump was taken
		# IncrIsNecessary is true
		$type = "full";
		return 1;
	}
	return 0;
	
}

sub bynumber {
	$a <=> $b;
}

sub parse_args {
        &GetOptions ("volume=s","type=s","incrDate=s","incrLevel:s","clientDir=s","dest=s","restoreDir=s","bkupSrcNum=s","bkupSrcVolSet=s","fileList=s@");
        if ($opt_volume) {
                $volume=$opt_volume;
        }
        if ($opt_type) {
                $type=$opt_type;
        }
        if (defined($opt_incrDate)) {
                $incrDate=$opt_incrDate;
        }
        if ($opt_incrLevel) {
                $incrLevel=$opt_incrLevel;
        }
	if ($opt_clientDir) {
		$clientDir=$opt_clientDir;
	}
	if ($opt_dest) {
		$dest=$opt_dest;
	}
	if ($opt_restoreDir) {
		$restoreDir=$opt_restoreDir;
	}
	if (defined($opt_bkupSrcNum)) {
		$bkupSrcNum=$opt_bkupSrcNum;
	}
	if ($opt_bkupSrcVolSet) {
		$bkupSrcVolSet=$opt_bkupSrcVolSet;
	}
	if (@opt_fileList) {
		@fileList=@opt_fileList;
	}
	#die "\tUSAGE: XXXX\n" if (!($opt_volume && $opt_type && $opt_incrDate && $opt_dest && $opt_clientDir )); 
	$incrLevel = 0 if ( ! $incrLevel);
}

parse_args();
my $vosop=undef;

if (! defined($volume) || ! defined($type) || ! defined($clientDir)) {
	die("Arguments --volume, --type, and --clientDir are mandatory for $0\n");
}

#print "$0 called with volume:$volume type:$type incrDate:$incrDate incrLevel:$incrLevel clientDir:$clientDir dest:$dest restoreDir:$restoreDir fileList:@fileList\n";

my $overallerror=0;

die("BackupAFS::Lib->new failed\n") if ( !(my $bafs = BackupAFS::Lib->new) );
%Conf = $bafs->Conf();
$VOS = $Conf{AfsVosPath};
die("vos binary $VOS is not executable\n") if (! -x $VOS );

if (( $type eq "full" ) || ( $type eq "incr" )) {
	$vosop = "dump";

	# We can't vos backup ".backup" volumes. *sigh*
	$RWvolume = $volume;
	$RWvolume =~s/\.backup$//g;

	# setup the dir for BackupAFS. We do this regardless, because
	# if we don't mkdir and we don't need to do an incremental dump
	#(because of no updates), then no parent dumps of this volume
	# would show up when browsing via the CGI at this level.
	#system("/bin/mkdir -p $dest/f%2f/f$RWvolume"); # Ugly as sin.

	# BackupPC4AFS used the old BackupPC concept of filename mangling.
	# BAckupAFS doesn't do this. The f%2f is replaced with "volumes" and
	# filenames are no longer prepended with "f".

	#mkpath("$dest/f%2f/f$RWvolume") or die "Couldn't make directory $dest/f%2f/f$RWvolume: $!\n";
	mkpath("$dest/volumes/$RWvolume") or die "Couldn't make directory $dest/volumes/$RWvolume: $!\n";

	my $cmd = "$VOS backup -id $RWvolume -localauth";
	print "$cmd\n";
	my $localerror = 1;
	open (VBU, "$cmd 2>&1 |") or die "Couldn't create backup volume of $RWvolume\n";
	while (<VBU>) {
		chomp;
		my $line=$_;
		$localerror=0 if ($line=~/Created backup volume/);
		print "$VOS backup : \"$line\"\n";
	}
	close (VBU);
	die "Error during $cmd\n" if ($localerror);

	if (($type eq "incr") && (IncrIsNecessary($RWvolume) == 0)) {
		# Cowardly refuse to dump an unchanged volume
		print "Cowardly refusing to dump an unchanged volume\n";
		print "Total files: 0\n";
		print "Total bytes: 0\n";
		exit 0;
	}

	# The volume is now frozen (.backup created) and ready for dumping.
	# Note that the dump timestamp recorded by BackupAFS should not really
	# be the timestamp that BackupAFS starts the dump of the entire volumeset
	# (this command is spawned once per volume), but rather the
	# timestamp of the above command. It's beyond the scope of this
	# XferMethod to change that, however. Instead we settle for naming
	# our files with the real date&time that the .backup volume was created
	# and setting a default incremental time 5 mins prior to the last successful
	# dump. This value (300 in Vos.pm) may be adjusted upwards. The
	# tradeoff being that more data may be unnecessarily dumped for
	# volumes that change often.
	# Note that the backup time (start of this script) recorded by BackupAFS will
	# always be the same as or EARLIER than the date of the creation of the .backup
	# volumes, which means that while some data on non-quiescent volumes may be dumped
	# twice (once in the parent and once in any incrementals), this eliminates the
	# possibility of data losee at the sacrifice of slightly more disk space.
	my $backuptime=0;
		open (VEX, "$VOS examine $volume -localauth|") or die "Couldn't examine volume $volume\n";
		while (<VEX>) {
			chomp;
			my $line=$_;
			next unless ($line=~/Creation/);
			my $creationdate=$line;
			$creationdate=~s/^\s+Creation\s+//g;
			my ($dow,$month,$dom,$time,$year)=split /\s+/,$creationdate;
			my ($hour,$min,$sec)=split /:/,$time;
			$dom = "0$dom" unless ($dom=~/\d\d/);
			%map = (
				Jan => "01",
				Feb => "02",
				Mar => "03",
				Apr => "04",
				May => "05",
				Jun => "06",
				Jul => "07",
				Aug => "08",
				Sep => "09",
				Oct => "10",
				Nov => "11",
				Dec => "12",
			);
			my $monthnum = $map{$month};
			# We're constructing part of the filename for the
			# vos dump here. Do NOT change this or you will
			# break other parts of this script which make
			# assumptions about the naming (sorting and
			# restorations). You've been warned.
			$backuptime="$year"."_"."$monthnum"."_"."$dom"."_"."$hour"."_"."$min"."_"."$sec";
			my ($day,$hour)=split /\s+/,$time;
			print " $volume created on: $creationdate";
			print "(converted file time: $backuptime)\n";
		}
		close (VEX);
	# Again, pleased to not be touching the file name. BackupAFS no longer
	# mangles the name.
	#my $file = "f%2f/f$RWvolume/f$RWvolume-$backuptime-L$incrLevel.vdmp";
	#my $NFLfile = "$dest/f%2f/f$RWvolume/f$RWvolume-$backuptime-L$incrLevel.vdmp";
	my $file = "volumes/$RWvolume/$RWvolume-$backuptime-L$incrLevel.vdmp";
	my $NFLfile = "$dest/volumes/$RWvolume/$RWvolume-$backuptime-L$incrLevel.vdmp";

	if ($type eq "full") {
		$time = 0;
		print "Doing a full backup\n";
	} else {
		# Of COURSE vos dump expects the "-time" value to be in
		# a different format than BackupAFS uses. Epoch anyone?
		$time = $incrDate;
		my ($day,$hour)=split /\s+/,$time;
		$day=join("/",(split /-/,$day)[1,2,0]);
		$time="$day $hour";
		print "Doing an incremental backup for changes since $time\n";
	}

	# OK, finally do the dump and then add the file to NewFileList.
        chdir "$dest" or die "Couldn't change to dir $dir while dumping $volume: $!\n";
	my $cmd = "$VOS $vosop -id $volume -time \"$time\" -file $file -verbose -localauth";
	#system("$cmd");
	print "$cmd\n";
	$localerror = 1;
	# because we're redirecting STDERR to STOUT, everything goes to the XferLOG. STDERR
	# should probably go to XferERR instead. XXX
	open (VDMP, "$cmd 2>&1 |") or die "Couldn't dump $volume\n";
	while (<VDMP>) {
		chomp;
		my $line=$_;
		print "$VOS dump : \"$line\"\n";
		$localerror = 0 if ( $line=~/Dumped volume/)
	}
	close (VDMP);
	die "Error with vos dump\n" if ($localerror);

	my $cmd = "/bin/echo $NFLfile >> $clientDir/NewFileList";
	system("$cmd");

	# XXX ls is an ugly way to get this info.
	#my $listing = `/bin/ls -l $dest/$file`;
	#my $byteCnt=(split /\s+/,$listing)[4];
	my $fileCnt=1;
	$byteCnt+=getSize("$dest/$file");
	print "Total files: $fileCnt\n";
	print "Total bytes: $byteCnt\n";
} else {
	my $afsfshost=$volume;
	$afsfshost=~s/^.*-server\ //g;
	$afsfshost=~s/\s*-partition.*$//g;
	print "Pinging for $afsfshost\n";
	#die("BackupAFS::Lib->new failed\n") if ( !(my $bafs = BackupAFS::Lib->new) );

	my $delay = $bafs->CheckVolSetAlive($afsfshost);
	die("Cannot contact AFS fileserver $afsfshost") if ( $delay < 0 || $delay > 10 );
	print "ping delay to $afsfshost: $delay\n";

	$vosop = "restore";
	# yank info out of $restoreDir
	# format is UserProvidedArgs/extension, assuming that the user didn't
	# specify the partition as /vicepX.. if they did, preserve their
	# partition name. This is necessary because BackupAFS concatenates
	# the sharename and restoredir. Yes, this workaround is stupid,
	# but perl loves string matching.
	$restoreDir=~s/\/vicep/SomeStringAUserWouldNotType/g;
	$restoreargs = (split /\//,$restoreDir)[0];
	$restoreargs=~s/SomeStringAUserWouldNotType/\/vicep/g;
	die "Not enough information to restore volume(s)" unless (
		($restoreargs=~/-server /) &&
		($restoreargs=~/-partition /));

	# discover the parents of $bkupSrcNum
	my $level = getLevel($bkupSrcNum);
	my @backupdirs = ();
	push (@backupdirs, $bkupSrcNum);
	for ( $i = $bkupSrcNum ; $level > 0 && $i >= 0; $i--) {
		$testlevel = getLevel($i);
		next if ($testlevel >= $level );
                next if ($testlevel == 99999 );

		# $i's level is < current level... so it's a parent dump
		$level = $testlevel; #2
		push (@backupdirs, $i);
		print "Found parent dump $i, level:$level\n";
	}

	my @filelist = sort (@fileList); # alphanumeric is ok here.

	@backupdirs = sort bynumber @backupdirs; # bynumber!

	# When restoring multiple volumes at the same time, some
	# volumes would reach total restoration faster if these
	# nested loops were inverted. But the code would be quite a
	# bit more complicated.
	foreach my $datadir (@backupdirs) {
		print "searching $clientDir/$datadir for matching files...\n";
		foreach my $file (@filelist ) {
			my $mangle= getMangle($datadir);
			my $mangfile=$file;
			#$mangfile = join ("/f",split /\//,$mangfile);
			#$mangfile = "f%2f" . $mangfile unless ($mangfile=~/^f%2f/);
			if ($mangle == 0 ) {
				# not mangled. don't use mangled name. 
				$mangfile= "volumes" . $file;
			} else {
				# the backup uses mangled names.
				$mangfile = join ("/f",split /\//,$mangfile);
				$mangfile = "f%2f" . $mangfile unless ($mangfile=~/^f%2f/);
			}
			print "DEBUG: searching for $mangfile\n";
			#restoreaDir ("$clientDir/$datadir/$mangfile") if (-d "$clientDir/$datadir/$mangfile");
			if (-d "$clientDir/$datadir/$mangfile") {
				$overallerror = 1 if (restoreaDir ("$clientDir/$datadir/$mangfile"));
			}
			if (-f "$clientDir/$datadir/$mangfile") {
				$overallerror = 1 if (restoreaFile ("$clientDir/$datadir/$mangfile"));
			}
		}
	}
	print "Total files: $fileCnt\n";
	print "Total bytes: $byteCnt\n";

}
#print "$0 exiting with $overallerror\n-----\n";
exit $overallerror;
